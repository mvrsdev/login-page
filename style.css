body {
    padding: 0;
    margin: 0;
    font: 15px Arial, Helvetica, sans-serif;
}

.container {
    /* Setar o height e o width de um container para 100%
       da ViewPort (tamanho da janela, no Desktop. E
       tamanho da tela, no Mobile) permite que você tenha
       um container do tamanho todo da tela, o que te ajuda
       a poder alinhar os elementos filhos dentro dele.

       Referência:
       https://www.w3schools.com/css/css_rwd_viewport.asp
    */
    width: 100vw;
    height: 100vh;

    background-color: rgb(243, 240, 240);

    /* Perfeito! Essa é a maneira recomendada de
       alinhar elementos no centro: com o Flex.

       - Para alinhar os elementos filhos do container
       no eixo principal use o 'justify-content'.
       - Para alinhar os elementos filhos do container
       no eixo perpendicular use o 'align-items'.

       Referência:
       https://css-tricks.com/snippets/css/a-guide-to-flexbox/
    */
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Por que coloquei a tag e a classe dessa forma abaixo?
   Isso tem a ver com seletores. Eu quero garantir que::after

   SOMENTE as tags <form> que forem da classe "login-form"
   receberão as propriedades abaixo. Se for uma classe form
   em qualquer outra tag, por exemplo, não vai funcionar.

   Referência:
   https://www.w3schools.com/cssref/css_selectors.asp
   */
form.login-form {
    /* Colocar um padding (margem interna, ou margem para
       dentro do container) é muito mais eficiente que colocar
       um height fixo que seja discretamente maior que o conteúdo
       do container.

       Com o height fixo, sempre que você mudasse o
       conteúdo da caixa e esse novo conteúdo fosse maior ou menor,
       você teria que mudar manualmente o height para refletir essa
       mudança de tamanho do conteúdo interno.

       Agora imagine se o conteúdo dessa caixa for dinâmico com JS?
    */
    padding: 24px;

    border-radius: 4px;
    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2),
        0 6px 20px 0 rgba(0, 0, 0, 0.19);
    background-color: #fff;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

/*
    Mais uma vez, dê uma olhada nos selectors.

    Referência:
    https://www.w3schools.com/cssref/css_selectors.asp
*/
form.login-form fieldset {
    display: flex;
    flex-direction: column;
    border: 0;
}

form.login-form fieldset label {
    font-weight: bold;
}

.logo {
    width: 150px;
    height: 150px;
}

.login-button {
    margin-top: 16px;
    padding: 6px 10px;
    background-color: #4caf50;
    border: none;
    border-radius: 4px;
    color: white;
    font-size: 16px;
}
